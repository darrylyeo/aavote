"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
// locals
var runtime_1 = require("./runtime");
var network_1 = require("./network");
// @ts-ignore: this file will get generated and does not exist in the source code
var adapter_mjs_1 = require("./adapter.mjs");
// mutation returns a handler that will send the mutation to the server when
// invoked
function mutation(document) {
    var _this = this;
    // make sure we got a query document
    if (document.kind !== 'HoudiniMutation') {
        throw new Error('getQuery can only take query operations');
    }
    // pull the query text out of the compiled artifact
    var text = document.raw, linkModule = document.links;
    // grab the sesion from the adapter
    var session = adapter_mjs_1.getSession();
    // return an async function that sends the mutation go the server
    return function (variables) {
        // we want the mutation to throw an error if the network layer invokes this.error
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var result, mutationCtx, _a, data_1, errors, e_1;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        mutationCtx = new network_1.RequestContext({
                            fetch: window.fetch.bind(window),
                            error: function (code, e) {
                                // if we were given an error
                                if (e instanceof Error) {
                                    reject(e);
                                }
                                else {
                                    reject(new Error(e));
                                }
                            },
                            redirect: function (code, location) {
                                // send the user to the new location
                                adapter_mjs_1.goTo(location);
                                console.warn('dont know what to do with code just yet');
                            },
                        });
                        return [4 /*yield*/, network_1.fetchQuery(mutationCtx, { text: text, variables: variables }, session)
                            // we could have gotten a null response
                        ];
                    case 1:
                        _a = _b.sent(), data_1 = _a.data, errors = _a.errors;
                        // we could have gotten a null response
                        if (errors) {
                            mutationCtx.graphqlErrors(errors);
                            return [2 /*return*/];
                        }
                        if (!data_1) {
                            mutationCtx.graphqlErrors([
                                new Error('Encountered empty data response in mutation payload'),
                            ]);
                            return [2 /*return*/];
                        }
                        // update the result
                        result = data_1;
                        // we need to update any that this mutation touches
                        // wait for the link module to load
                        linkModule.then(function (_a) {
                            var links = _a.default;
                            // every entry in the link could point to a store that needs to update
                            // we can process them in parallel since there is no shared data
                            Promise.all(Object.entries(links()).map(function (_a) {
                                var _b = __read(_a, 2), documentName = _b[0], patchModule = _b[1];
                                return __awaiter(_this, void 0, void 0, function () {
                                    var patch, _c, _d, _e, currentValue, updateValue, variables_1;
                                    var e_2, _f;
                                    return __generator(this, function (_g) {
                                        switch (_g.label) {
                                            case 0: return [4 /*yield*/, patchModule
                                                // apply the changes to any stores that have registered themselves
                                            ];
                                            case 1:
                                                patch = (_g.sent()).default;
                                                try {
                                                    // apply the changes to any stores that have registered themselves
                                                    for (_c = __values(runtime_1.getDocumentStores(documentName)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                                        _e = _d.value, currentValue = _e.currentValue, updateValue = _e.updateValue, variables_1 = _e.variables;
                                                        // apply the patch
                                                        runtime_1.applyPatch(patch, updateValue, currentValue, data_1, variables_1);
                                                    }
                                                }
                                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                                finally {
                                                    try {
                                                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                                                    }
                                                    finally { if (e_2) throw e_2.error; }
                                                }
                                                return [2 /*return*/];
                                        }
                                    });
                                });
                            }));
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        reject(e_1);
                        return [2 /*return*/];
                    case 3:
                        // wrap the result in a store we can use to keep this query up to date
                        resolve(document.processResult(result));
                        return [2 /*return*/];
                }
            });
        }); });
    };
}
exports.default = mutation;
