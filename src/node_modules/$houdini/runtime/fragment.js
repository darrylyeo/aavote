"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// externals
var store_1 = require("svelte/store");
var svelte_1 = require("svelte");
// locals
var runtime_1 = require("./runtime");
// fragment returns the requested data from the reference
function fragment(fragment, reference) {
    // make sure we got a query document
    if (fragment.kind !== 'HoudiniFragment') {
        throw new Error('getFragment can only take fragment documents');
    }
    // @ts-ignore: .__variables is added by the selector and hidden from the user's world
    var variables = reference.__variables;
    var initialValue = fragment.applyMask(reference, variables);
    // wrap the result in a store we can use to keep this query up to date
    var value = store_1.readable(initialValue, function (set) {
        // build up the store object
        var store = {
            loaded: false,
            name: fragment.name,
            updateValue: function (newValue) {
                // update the public store
                set(newValue);
                // keep the internal value up to date aswell
                store.currentValue = newValue;
            },
            currentValue: initialValue,
            variables: variables,
        };
        // when the component monuts
        svelte_1.onMount(function () {
            // register the updater for the query
            runtime_1.registerDocumentStore(store);
        });
        // the function used to clean up the store
        return function () {
            runtime_1.unregisterDocumentStore(store);
        };
    });
    return value;
}
exports.default = fragment;
