declare type FetchParams = {
    text: string;
    variables: {
        [key: string]: any;
    };
};
export declare type FetchContext = {
    fetch: typeof window.fetch;
    error: (code: number, mesage: string | Error) => void;
    redirect: (statusCode: number, location: string) => void;
};
export declare type FetchSession = any;
declare type GraphQLError = {
    message: string;
};
declare type RequestPayload = {
    data: any;
    errors?: Error[];
};
declare type RequestHandler = (this: FetchContext, params: FetchParams, session?: FetchSession) => Promise<RequestPayload>;
export declare function fetchQuery(ctx: FetchContext, { text, variables, }: {
    text: string;
    variables: {
        [name: string]: unknown;
    };
}, session?: FetchSession): Promise<RequestPayload | {
    data: {};
    errors: {
        message: string;
    }[];
}>;
export declare class Environment {
    private handler;
    constructor(networkFn: RequestHandler);
    sendRequest(ctx: FetchContext, params: FetchParams, session?: FetchSession): Promise<RequestPayload>;
}
export declare function setEnvironment(env: Environment): void;
export declare function getEnvironment(): Environment | null;
export declare class RequestContext implements FetchContext {
    _ctx: FetchContext;
    continue: boolean;
    constructor(ctx: FetchContext);
    error(statusCode: number, message: string | Error): void;
    redirect(statusCode: number, location: string): void;
    fetch(input: RequestInfo, init?: RequestInit): Promise<Response>;
    graphqlErrors(errors: GraphQLError[]): void;
}
export {};
//# sourceMappingURL=network.d.ts.map