export declare type Fragment<_Result> = {
    readonly shape?: _Result;
};
export declare type Operation<_Result, _Input> = {
    readonly result: _Result;
    readonly input: _Input;
};
export declare type Session = any;
declare type Module<T> = Promise<{
    default: T;
}>;
export declare type TaggedGraphqlFragment = {
    name: string;
    kind: 'HoudiniFragment';
    applyMask: (root: any, variables: any) => any;
};
export declare type TaggedGraphqlMutation = {
    name: string;
    kind: 'HoudiniMutation';
    raw: string;
    processResult: (result: any) => any;
    links: Module<() => {
        [queryName: string]: Module<Patch>;
    }>;
};
export declare type TaggedGraphqlQuery = {
    name: string;
    kind: 'HoudiniQuery';
    raw: string;
    processResult: (result: any, variables: any) => any;
    initialValue: any;
    variables: {
        [key: string]: any;
    };
};
export declare type GraphQLTagResult = TaggedGraphqlQuery | TaggedGraphqlFragment | TaggedGraphqlMutation;
declare type Filter = {
    [key: string]: string | boolean | number;
};
export declare type ConnectionWhen = {
    must?: Filter;
    must_not?: Filter;
};
export declare type PatchAtom = {
    operation: 'add' | 'remove' | 'update' | 'delete';
    mutationName: string;
    mutationPath: string[];
    queryName: string;
    queryPath: string[];
    parentID?: {
        kind: 'Variable' | 'String' | 'Root';
        value: string;
    };
    when?: ConnectionWhen;
    connectionName?: string;
    position?: 'start' | 'end';
};
export declare type Patch = {
    operations?: {
        [op in PatchAtom['operation']]?: {
            parentID: {
                kind: 'String' | 'Variable' | 'Root';
                value: string;
            };
            position: 'start' | 'end';
            path: string[];
            when?: ConnectionWhen;
            connectionName?: string;
        }[];
    };
    fields?: {
        [fieldName: string]: Array<string[]>;
    };
    edges?: {
        [path: string]: Patch;
    };
};
export {};
//# sourceMappingURL=types.d.ts.map