"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateStoreData = exports.applyPatch = exports.unregisterDocumentStore = exports.registerDocumentStore = exports.getDocumentStores = void 0;
var _stores = {};
function getDocumentStores(name) {
    return _stores[name] || [];
}
exports.getDocumentStores = getDocumentStores;
// registerDocumentStore is used by query and fragment runtimes to register their updater with the dispatch table
function registerDocumentStore(store) {
    _stores[store.name] = __spread(getDocumentStores(store.name), [store]);
}
exports.registerDocumentStore = registerDocumentStore;
// unregisterDocumentStore is used by query and fragment runtimes to remove their updater from the dispatch table
function unregisterDocumentStore(target) {
    _stores[target.name] = getDocumentStores(target.name).filter(function (_a) {
        var updateValue = _a.updateValue;
        return updateValue !== target.updateValue;
    });
}
exports.unregisterDocumentStore = unregisterDocumentStore;
function applyPatch(patch, updateValue, currentState, payload, variables) {
    // a place to write updates to
    var target = currentState;
    // walk down the the patch and if there was a mutation, commit the update
    if (walkPatch(patch, payload, target, variables)) {
        updateValue(target, variables);
    }
}
exports.applyPatch = applyPatch;
function walkPatch(patch, payload, target, variables) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f;
    // track if we update something
    var updated = false;
    // if we are walking down a list then we need to take one more step
    if (Array.isArray(payload)) {
        try {
            for (var payload_1 = __values(payload), payload_1_1 = payload_1.next(); !payload_1_1.done; payload_1_1 = payload_1.next()) {
                var subobj = payload_1_1.value;
                // if walking down updated something and we don't think we have
                if (walkPatch(patch, subobj, target, variables) && !updated) {
                    // keep us up to date
                    updated = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (payload_1_1 && !payload_1_1.done && (_a = payload_1.return)) _a.call(payload_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // we're done with this entry (ignore fields and edges on lists)
        return updated;
    }
    try {
        // during the search for fields to update, we might need to go searching through
        // many nodes for the response
        for (var _g = __values(Object.entries(patch.fields || {})), _h = _g.next(); !_h.done; _h = _g.next()) {
            var _j = __read(_h.value, 2), fieldName = _j[0], targetPaths = _j[1];
            try {
                // update the target object at every path we need to
                for (var targetPaths_1 = (e_3 = void 0, __values(targetPaths)), targetPaths_1_1 = targetPaths_1.next(); !targetPaths_1_1.done; targetPaths_1_1 = targetPaths_1.next()) {
                    var path = targetPaths_1_1.value;
                    // if there is no id, we can update the fields
                    if (!payload.id) {
                        throw new Error('Cannot update fields without id in payload');
                    }
                    if (updateField(path, target, payload.id, payload[fieldName]) && !updated) {
                        updated = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (targetPaths_1_1 && !targetPaths_1_1.done && (_c = targetPaths_1.return)) _c.call(targetPaths_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        // we might need to add this entity to some connections in the response
        for (var _k = __values(Object.entries(patch.operations || {})), _l = _k.next(); !_l.done; _l = _k.next()) {
            var _m = __read(_l.value, 2), operation = _m[0], paths = _m[1];
            // if this is undefined, ill admit typescript saved me from something
            if (!paths) {
                continue;
            }
            var _loop_1 = function (path, parentID, position, when, connectionName) {
                // if there are conditions for this operation
                if (when) {
                    // we only NEED there to be target filters for must's
                    var targets_1 = target.__connectionFilters
                        ? target.__connectionFilters[connectionName || '']
                        : null;
                    var ok = true;
                    // check must's first
                    if (when.must && targets_1) {
                        ok = Object.entries(when.must || {}).reduce(function (prev, _a) {
                            var _b = __read(_a, 2), key = _b[0], value = _b[1];
                            return Boolean(prev && targets_1[key] == value);
                        }, ok);
                    }
                    // and then must_not
                    if (when.must_not) {
                        ok =
                            !targets_1 ||
                                Object.entries(when.must_not || {}).reduce(function (prev, _a) {
                                    var _b = __read(_a, 2), key = _b[0], value = _b[1];
                                    return Boolean(prev && targets_1[key] != value);
                                }, ok);
                    }
                    // if we didn't satisfy everything we needed to
                    if (!ok) {
                        return "continue";
                    }
                }
                // if we have to add the connection somewhere
                if (operation === 'add' &&
                    insertInConnection(path, target, parentID, position, payload, variables) &&
                    !updated) {
                    updated = true;
                }
                // we could have to remove this element from somewhere
                else if (operation === 'remove' &&
                    removeFromConnection(path, target, parentID, payload, variables) &&
                    !updated) {
                    updated = true;
                }
                // we could have to delete this element from somewhere
                else if (operation === 'delete' &&
                    // @ts-ignore: the field points to a string, not an object
                    deleteFromConnection(path, target, payload) &&
                    !updated) {
                    updated = true;
                }
            };
            try {
                // look at every path we have to perform this operation
                for (var paths_1 = (e_5 = void 0, __values(paths)), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
                    var _o = paths_1_1.value, path = _o.path, parentID = _o.parentID, position = _o.position, when = _o.when, connectionName = _o.connectionName;
                    _loop_1(path, parentID, position, when, connectionName);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (paths_1_1 && !paths_1_1.done && (_e = paths_1.return)) _e.call(paths_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_l && !_l.done && (_d = _k.return)) _d.call(_k);
        }
        finally { if (e_4) throw e_4.error; }
    }
    // walk down any related fields if they exist
    if (patch.edges) {
        try {
            for (var _p = __values(Object.keys(patch.edges || {})), _q = _p.next(); !_q.done; _q = _p.next()) {
                var edgeName = _q.value;
                // walk down and keep track if we updated anything
                if (walkPatch(patch.edges[edgeName], payload[edgeName], target, variables) &&
                    !updated) {
                    updated = true;
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_q && !_q.done && (_f = _p.return)) _f.call(_p);
            }
            finally { if (e_6) throw e_6.error; }
        }
    }
    // bubble up if there was an update
    return updated;
}
function insertInConnection(path, target, parentID, position, value, variables) {
    return walkToConnection(path, target, function (head, path, target) {
        var e_7, _a;
        var attributeName = path[0];
        // if we are entering something from root the target should be an object
        if (parentID.kind === 'Root') {
            // if there is an element after this then we need to treat it as an
            // attribute for the item pointed at by head
            if (attributeName) {
                target[head][attributeName] =
                    position === 'end'
                        ? __spread((target[head][attributeName] || []), [value]) : __spread([value], (target[head][attributeName] || []));
            }
            // no attribute name means head is in fact the accesor and we just need to push
            else {
                // target[head] = [...(target[head] || []), value]
                target[head] =
                    position === 'end'
                        ? __spread((target[head] || []), [value]) : __spread([value], (target[head] || []));
            }
            // we did update something
            return true;
        }
        // the head points to the list we have to look at for possible parents
        var parents = target[head];
        if (!Array.isArray(parents)) {
            throw new Error('Expected array in response');
        }
        try {
            // look at every option for a matching id
            for (var parents_1 = __values(parents), parents_1_1 = parents_1.next(); !parents_1_1.done; parents_1_1 = parents_1.next()) {
                var entry = parents_1_1.value;
                // the id we are looking for
                var targetID = parentID.kind === 'String' ? parentID.value : variables[parentID.value];
                // if the id matches
                if (entry.id === targetID) {
                    // we found it!
                    // check if we're supposed to add it to the end
                    if (position === 'end') {
                        entry[attributeName] = __spread((entry[attributeName] || []), [value]);
                    }
                    // we're supposed to add it to the front
                    else {
                        entry[attributeName] = __spread([value], (entry[attributeName] || []));
                    }
                    // we did in fact update something
                    return true;
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (parents_1_1 && !parents_1_1.done && (_a = parents_1.return)) _a.call(parents_1);
            }
            finally { if (e_7) throw e_7.error; }
        }
        // we didn't update anything
        return false;
    });
}
function deleteFromConnection(path, target, targetID) {
    return walkToConnection(path, target, function (head, path, target) {
        var e_8, _a;
        var attributeName = path[0];
        // if this is a root list
        if (!attributeName) {
            var lengthBefore = target[head].length || 0;
            // remove any entries with the matching id
            target[head] = target[head].filter(function (_a) {
                var id = _a.id;
                return id !== targetID;
            });
            var lengthAfter = target[head].length || 0;
            // track if we did infact update something
            return lengthBefore !== lengthAfter;
        }
        // the head points to the list we have to look at for possible parents
        var parents = target[head];
        if (!Array.isArray(parents)) {
            throw new Error('Expected array in response');
        }
        // start off having not udpated anything
        var updated = false;
        try {
            // look at every option for a matching id
            for (var parents_2 = __values(parents), parents_2_1 = parents_2.next(); !parents_2_1.done; parents_2_1 = parents_2.next()) {
                var entry = parents_2_1.value;
                // if the element does not exist in the target
                if (attributeName && !entry[attributeName]) {
                    // there's nothing to remove
                    continue;
                }
                var lengthBefore = entry[attributeName].length || 0;
                // remove any entries with the matching id
                entry[attributeName] = entry[attributeName].filter(function (_a) {
                    var id = _a.id;
                    return id !== targetID;
                });
                var lengthAfter = entry[attributeName].length || 0;
                // track if we did infact update something
                updated = lengthBefore !== lengthAfter;
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (parents_2_1 && !parents_2_1.done && (_a = parents_2.return)) _a.call(parents_2);
            }
            finally { if (e_8) throw e_8.error; }
        }
        // we didn't update anything
        return updated;
    });
}
function removeFromConnection(path, target, parentID, value, variables) {
    return walkToConnection(path, target, function (head, path, target) {
        var e_9, _a;
        var attributeName = path[0];
        // if we are entering something from root the target should be an object
        if (parentID.kind === 'Root') {
            // if there is an element after this then we need to treat it as an
            // attribute for the item pointed at by head
            if (attributeName) {
                target[head][attributeName] = (target[head][attributeName] || []).filter(function (_a) {
                    var id = _a.id;
                    return id !== value.id;
                });
            }
            // no attribute name means head is in fact the accesor and we just need to push
            else {
                target[head] = (target[head] || []).filter(function (_a) {
                    var id = _a.id;
                    return id !== value.id;
                });
            }
            // we did update something
            return true;
        }
        // the head points to the list we have to look at for possible parents
        var parents = target[head];
        if (!Array.isArray(parents)) {
            throw new Error('Expected array in response');
        }
        try {
            // look at every option for a matching id
            for (var parents_3 = __values(parents), parents_3_1 = parents_3.next(); !parents_3_1.done; parents_3_1 = parents_3.next()) {
                var entry = parents_3_1.value;
                // the id we are looking for
                var targetID = parentID.kind === 'String' ? parentID.value : variables[parentID.value];
                // if the id matches
                if (entry.id === targetID) {
                    // we found the parent so remove the element from the connection
                    entry[attributeName] = (entry[attributeName] || []).filter(function (_a) {
                        var id = _a.id;
                        return id !== value.id;
                    });
                    // TODO: we might not have updated something, returning true anyway
                    return true;
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (parents_3_1 && !parents_3_1.done && (_a = parents_3.return)) _a.call(parents_3);
            }
            finally { if (e_9) throw e_9.error; }
        }
        // we didn't update anything
        return false;
    });
}
function walkToConnection(path, target, onConnection) {
    var e_10, _a;
    // keep track if we updated a field
    var updated = false;
    // since we are entering something into a list, we need to stop on the second to
    // last element to find the node with matching id
    if (path.length <= 2) {
        if (onConnection(path[0], path.slice(1), target) && !updated) {
            updated = true;
        }
    }
    // keep going walking the path
    else {
        // pull the first element off of the list
        var head = path[0];
        var tail = path.slice(1, path.length);
        // look at the value in the response
        var element = target[head];
        // if the element is a list
        if (Array.isArray(element)) {
            try {
                // walk down every element in the list
                for (var element_1 = __values(element), element_1_1 = element_1.next(); !element_1_1.done; element_1_1 = element_1.next()) {
                    var entry = element_1_1.value;
                    // if we applied the udpate
                    if (walkToConnection(tail, entry, onConnection)) {
                        updated = true;
                        // dont keep searching
                        break;
                    }
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (element_1_1 && !element_1_1.done && (_a = element_1.return)) _a.call(element_1);
                }
                finally { if (e_10) throw e_10.error; }
            }
        }
        // the element is an object
        else {
            // keep going down
            if (walkToConnection(tail, element, onConnection) && !updated) {
                updated = true;
            }
        }
    }
    return updated;
}
function updateField(path, target, targetId, value) {
    var e_11, _a;
    // keep track if we updated a field
    var updated = false;
    // if we are looking at the last element, the entry in the path corresponds to the field that we need to update
    if (path.length === 1) {
        // if the target is a list, there's something wrong
        if (Array.isArray(target)) {
            throw new Error('final entry in path is a list?');
        }
        // only update fields if the id's match
        if (target.id === targetId) {
            // we need to update the field
            target[path[0]] = value;
            // track that we did something
            updated = true;
        }
    }
    else {
        // pull the first element off of the list
        var head = path[0];
        var tail = path.slice(1, path.length);
        // look at the value in the response
        var element = target[head];
        // if the element is a list
        if (Array.isArray(element)) {
            try {
                // walk down every element in the list
                for (var element_2 = __values(element), element_2_1 = element_2.next(); !element_2_1.done; element_2_1 = element_2.next()) {
                    var entry = element_2_1.value;
                    // if we applied the udpate
                    if (updateField(tail, entry, targetId, value)) {
                        updated = true;
                        // dont keep searching
                        break;
                    }
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (element_2_1 && !element_2_1.done && (_a = element_2.return)) _a.call(element_2);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
        // the element is an object
        else {
            // keep going down
            if (updateField(tail, element, targetId, value) && !updated) {
                updated = true;
            }
        }
    }
    return updated;
}
function updateStoreData(storeName, result, variables) {
    var e_12, _a;
    if (!result) {
        console.log('updating with null result');
        return;
    }
    try {
        // apply the new update to every store matching the name
        // TODO: this might not be what we want. the same query could show up
        // in multiple places and get the same update
        for (var _b = __values(getDocumentStores(storeName)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var store = _c.value;
            // apply the new date
            store.updateValue(result.data, variables);
        }
    }
    catch (e_12_1) { e_12 = { error: e_12_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_12) throw e_12.error; }
    }
}
exports.updateStoreData = updateStoreData;
