import type { Patch } from '../../../types';
export declare type DocumentStore = {
    name: string;
    currentValue: any;
    variables: any;
    updateValue: (value: any, variables: any) => void;
};
export declare function getDocumentStores(name: string): DocumentStore[];
export declare function registerDocumentStore(store: DocumentStore): void;
export declare function unregisterDocumentStore(target: DocumentStore): void;
declare type Record = {
    [key: string]: any;
} & {
    id?: string;
    __connectionFilters?: {
        [connectionName: string]: {
            [key: string]: string | number | boolean;
        };
    };
};
declare type Data = Record | Record[];
export declare function applyPatch(patch: Patch, updateValue: (newValue: Data, variables: {
    [key: string]: any;
}) => void, currentState: Data, payload: Data, variables: {
    [key: string]: any;
}): void;
export declare function updateStoreData(storeName: string, result: any, variables: any): void;
export {};
//# sourceMappingURL=runtime.d.ts.map